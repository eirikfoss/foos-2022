{"ast":null,"code":"import { getPlayers, deletePlayer, updPlayer, createPlayer } from \"./player-service\";\nimport getAllPlayerImages from \"../../services/getAllPlayerImages\";\n/* action types */\n\nexport const FETCH_PLAYERS_REQUEST = \"FETCH_PLAYERS_REQUEST\";\nexport const FETCH_PLAYERS_SUCCESS = \"FETCH_PLAYERS_SUCCESS\";\nexport const FETCH_PLAYERS_FAIL = \"FETCH_PLAYERS_FAIL\";\nexport const FETCH_PLAYER_IMAGES_REQUEST = \"FETCH_PLAYER_IMAGES_REQUEST\";\nexport const FETCH_PLAYER_IMAGES_SUCCESS = \"FETCH_PLAYER_IMAGES_SUCCESS\";\nexport const FETCH_PLAYER_IMAGES_FAIL = \"FETCH_PLAYER_IMAGES_FAIL\";\nexport const ADD_PLAYER_REQUEST = \"ADD_PLAYER_REQUEST\";\nexport const ADD_PLAYER_SUCCESS = \"ADD_PLAYER_SUCCESS\";\nexport const ADD_PLAYER_FAIL = \"ADD_PLAYER_FAIL\";\nexport const REMOVE_PLAYER_REQUEST = \"REMOVE_PLAYER_REQUEST\";\nexport const REMOVE_PLAYER_SUCCESS = \"REMOVE_PLAYER_SUCCESS\";\nexport const REMOVE_PLAYER_FAIL = \"REMOVE_PLAYER_FAIL\";\nexport const UPDATE_PLAYER_REQUEST = \"UPDATE_PLAYER_REQUEST\";\nexport const UPDATE_PLAYER_SUCCESS = \"UPDATE_PLAYER_SUCCESS\";\nexport const UPDATE_PLAYER_FAIL = \"UPDATE_PLAYER_FAIL\";\nexport const HANDLE_CHOSEN_REQUEST = \"HANDLE_CHOSEN_REQUEST\";\nexport const HANDLE_CHOSEN_SUCCESS = \"HANDLE_CHOSEN_SUCCESS\";\nexport const HANDLE_CHOSEN_FAIL = \"HANDLE_CHOSEN_FAIL\";\nexport const SET_PLAYER = \"SET_PLAYER\";\nexport const SET_CHOSEN_PLAYERS = \"SET_CHOSEN_PLAYERS\";\nexport const SET_SHUFFLING = \"SET_SHUFFLING\";\nexport const SET_SORT_PLAYERS_BY = \"SET_SORT_PLAYERS_BY\";\n/* action creators: thunk version */\n\nexport const fetchPlayers = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_PLAYERS_REQUEST\n    });\n\n    try {\n      const _ref = await getPlayers(),\n            data = _ref.data;\n\n      dispatch({\n        type: FETCH_PLAYERS_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: FETCH_PLAYERS_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const addPlayer = player => {\n  return async dispatch => {\n    dispatch({\n      type: ADD_PLAYER_REQUEST\n    });\n\n    try {\n      const _ref2 = await createPlayer(player),\n            data = _ref2.data;\n\n      dispatch({\n        type: ADD_PLAYER_SUCCESS,\n        payload: data\n      });\n      console.log(data);\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: ADD_PLAYER_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const handleChosenPlayer = (pList, cList) => {\n  return dispatch => {\n    dispatch({\n      type: HANDLE_CHOSEN_REQUEST\n    });\n\n    try {\n      const data = {\n        pList,\n        cList\n      };\n      dispatch({\n        type: HANDLE_CHOSEN_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: HANDLE_CHOSEN_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const updatePlayer = player => {\n  return async dispatch => {\n    dispatch({\n      type: UPDATE_PLAYER_REQUEST\n    });\n\n    try {\n      const _ref3 = await updPlayer(player),\n            data = _ref3.data;\n\n      dispatch({\n        type: UPDATE_PLAYER_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: UPDATE_PLAYER_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const removePlayer = id => {\n  return async dispatch => {\n    dispatch({\n      type: REMOVE_PLAYER_REQUEST\n    });\n\n    try {\n      await deletePlayer(id);\n      dispatch({\n        type: REMOVE_PLAYER_SUCCESS,\n        payload: id\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: REMOVE_PLAYER_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const fetchPlayerImages = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_PLAYER_IMAGES_REQUEST\n    });\n\n    try {\n      const _ref4 = await getAllPlayerImages(),\n            data = _ref4.data;\n\n      dispatch({\n        type: FETCH_PLAYER_IMAGES_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: FETCH_PLAYER_IMAGES_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const setPlayer = player => ({\n  type: SET_PLAYER,\n  payload: player\n});\nexport const setChosenPlayers = chosenList => ({\n  type: SET_CHOSEN_PLAYERS,\n  payload: chosenList\n});\nexport const shuffling = () => ({\n  type: SET_SHUFFLING\n});\nexport const sortPlayersBy = sortBy => ({\n  type: SET_SORT_PLAYERS_BY,\n  payload: sortBy\n});","map":{"version":3,"sources":["/home/pi/foos-old/src/redux/players/player-action.js"],"names":["getPlayers","deletePlayer","updPlayer","createPlayer","getAllPlayerImages","FETCH_PLAYERS_REQUEST","FETCH_PLAYERS_SUCCESS","FETCH_PLAYERS_FAIL","FETCH_PLAYER_IMAGES_REQUEST","FETCH_PLAYER_IMAGES_SUCCESS","FETCH_PLAYER_IMAGES_FAIL","ADD_PLAYER_REQUEST","ADD_PLAYER_SUCCESS","ADD_PLAYER_FAIL","REMOVE_PLAYER_REQUEST","REMOVE_PLAYER_SUCCESS","REMOVE_PLAYER_FAIL","UPDATE_PLAYER_REQUEST","UPDATE_PLAYER_SUCCESS","UPDATE_PLAYER_FAIL","HANDLE_CHOSEN_REQUEST","HANDLE_CHOSEN_SUCCESS","HANDLE_CHOSEN_FAIL","SET_PLAYER","SET_CHOSEN_PLAYERS","SET_SHUFFLING","SET_SORT_PLAYERS_BY","fetchPlayers","dispatch","type","data","payload","e","console","log","message","alert","addPlayer","player","handleChosenPlayer","pList","cList","updatePlayer","removePlayer","id","fetchPlayerImages","setPlayer","setChosenPlayers","chosenList","shuffling","sortPlayersBy","sortBy"],"mappings":"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","sourcesContent":["import {\r\n  getPlayers,\r\n  deletePlayer,\r\n  updPlayer,\r\n  createPlayer\r\n} from \"./player-service\";\r\n\r\nimport getAllPlayerImages from \"../../services/getAllPlayerImages\";\r\n\r\n/* action types */\r\nexport const FETCH_PLAYERS_REQUEST = \"FETCH_PLAYERS_REQUEST\";\r\nexport const FETCH_PLAYERS_SUCCESS = \"FETCH_PLAYERS_SUCCESS\";\r\nexport const FETCH_PLAYERS_FAIL = \"FETCH_PLAYERS_FAIL\";\r\n\r\nexport const FETCH_PLAYER_IMAGES_REQUEST = \"FETCH_PLAYER_IMAGES_REQUEST\";\r\nexport const FETCH_PLAYER_IMAGES_SUCCESS = \"FETCH_PLAYER_IMAGES_SUCCESS\";\r\nexport const FETCH_PLAYER_IMAGES_FAIL = \"FETCH_PLAYER_IMAGES_FAIL\";\r\n\r\nexport const ADD_PLAYER_REQUEST = \"ADD_PLAYER_REQUEST\";\r\nexport const ADD_PLAYER_SUCCESS = \"ADD_PLAYER_SUCCESS\";\r\nexport const ADD_PLAYER_FAIL = \"ADD_PLAYER_FAIL\";\r\n\r\nexport const REMOVE_PLAYER_REQUEST = \"REMOVE_PLAYER_REQUEST\";\r\nexport const REMOVE_PLAYER_SUCCESS = \"REMOVE_PLAYER_SUCCESS\";\r\nexport const REMOVE_PLAYER_FAIL = \"REMOVE_PLAYER_FAIL\";\r\n\r\nexport const UPDATE_PLAYER_REQUEST = \"UPDATE_PLAYER_REQUEST\";\r\nexport const UPDATE_PLAYER_SUCCESS = \"UPDATE_PLAYER_SUCCESS\";\r\nexport const UPDATE_PLAYER_FAIL = \"UPDATE_PLAYER_FAIL\";\r\n\r\nexport const HANDLE_CHOSEN_REQUEST = \"HANDLE_CHOSEN_REQUEST\";\r\nexport const HANDLE_CHOSEN_SUCCESS = \"HANDLE_CHOSEN_SUCCESS\";\r\nexport const HANDLE_CHOSEN_FAIL = \"HANDLE_CHOSEN_FAIL\";\r\n\r\nexport const SET_PLAYER = \"SET_PLAYER\";\r\n\r\nexport const SET_CHOSEN_PLAYERS = \"SET_CHOSEN_PLAYERS\";\r\n\r\nexport const SET_SHUFFLING = \"SET_SHUFFLING\";\r\n\r\nexport const SET_SORT_PLAYERS_BY = \"SET_SORT_PLAYERS_BY\";\r\n\r\n/* action creators: thunk version */\r\nexport const fetchPlayers = () => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: FETCH_PLAYERS_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await getPlayers();\r\n      dispatch({ type: FETCH_PLAYERS_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: FETCH_PLAYERS_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const addPlayer = player => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: ADD_PLAYER_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await createPlayer(player);\r\n\r\n      dispatch({ type: ADD_PLAYER_SUCCESS, payload: data });\r\n      console.log(data);\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: ADD_PLAYER_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const handleChosenPlayer = (pList, cList) => {\r\n  return dispatch => {\r\n    dispatch({\r\n      type: HANDLE_CHOSEN_REQUEST\r\n    });\r\n    try {\r\n      const data = { pList, cList };\r\n      dispatch({ type: HANDLE_CHOSEN_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: HANDLE_CHOSEN_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const updatePlayer = player => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: UPDATE_PLAYER_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await updPlayer(player);\r\n      dispatch({ type: UPDATE_PLAYER_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: UPDATE_PLAYER_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const removePlayer = id => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: REMOVE_PLAYER_REQUEST\r\n    });\r\n    try {\r\n      await deletePlayer(id);\r\n      dispatch({ type: REMOVE_PLAYER_SUCCESS, payload: id });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: REMOVE_PLAYER_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const fetchPlayerImages = () => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: FETCH_PLAYER_IMAGES_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await getAllPlayerImages();\r\n      dispatch({ type: FETCH_PLAYER_IMAGES_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: FETCH_PLAYER_IMAGES_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const setPlayer = player => ({\r\n  type: SET_PLAYER,\r\n  payload: player\r\n});\r\n\r\nexport const setChosenPlayers = chosenList => ({\r\n  type: SET_CHOSEN_PLAYERS,\r\n  payload: chosenList\r\n});\r\n\r\nexport const shuffling = () => ({\r\n  type: SET_SHUFFLING\r\n});\r\n\r\nexport const sortPlayersBy = sortBy => ({\r\n  type: SET_SORT_PLAYERS_BY,\r\n  payload: sortBy\r\n});\r\n"]},"metadata":{},"sourceType":"module"}