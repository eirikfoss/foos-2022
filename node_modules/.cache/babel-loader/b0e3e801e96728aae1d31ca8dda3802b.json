{"ast":null,"code":"export default function getMyStats(player, matches) {\n  let stats = {\n    wins: 0,\n    loss: 0,\n    difference: 0,\n    rating: 1500,\n    winP: 0,\n    streak: 0,\n    longestStreak: 0,\n    gamesPlayed: 0,\n    screensFor: 0,\n    screensAgainst: 0\n  };\n  let myMatches = matches.filter(el => player.matches.indexOf(el._id) !== -1); //Filtering matches into blue and red\n\n  let blueMatches = myMatches.filter(m => m.teams.blue.players[0]._id === player._id || m.teams.blue.players[1]._id === player._id);\n  let redMatches = myMatches.filter(m => m.teams.red.players[0]._id === player._id || m.teams.red.players[1]._id === player._id); //Adding wins, loss and rating\n\n  blueMatches.forEach(m => {\n    m.teams.blue.score === 10 ? stats.wins++ : stats.loss++;\n    stats.rating += m.teams.blue.adjustment;\n  });\n  redMatches.forEach(m => {\n    m.teams.red.score === 10 ? stats.wins++ : stats.loss++;\n    stats.rating += m.teams.red.adjustment;\n  }); //Adding win percentage\n\n  if (stats.wins === 0 && stats.loss === 0) {\n    stats.winP = 0;\n  } else {\n    stats.winP = stats.wins / (stats.wins + stats.loss) * 100;\n  }\n\n  stats.winP = stats.winP.toFixed(); //Calculate streak and screens\n\n  myMatches.forEach(m => {\n    let team = m.teams.blue.players[0]._id === player._id || m.teams.blue.players[1]._id === player._id ? \"blue\" : \"red\";\n\n    if (team === \"blue\") {\n      stats.difference += m.teams.blue.score - m.teams.red.score;\n      stats.streak = m.teams.blue.score === 10 ? stats.streak + 1 : 0;\n      stats.screensFor = m.teams.blue.score === 10 && m.teams.red.score === 0 ? stats.screensFor + 1 : stats.screensFor;\n      stats.screensAgainst = m.teams.blue.score === 0 && m.teams.red.score === 10 ? stats.screensAgainst + 1 : stats.screensAgainst;\n    } else {\n      stats.difference += m.teams.red.score - m.teams.blue.score;\n      stats.streak = m.teams.red.score === 10 ? stats.streak + 1 : 0;\n      stats.screensFor = m.teams.red.score === 10 && m.teams.blue.score === 0 ? stats.screensFor + 1 : stats.screensFor;\n      stats.screensAgainst = m.teams.red.score === 0 && m.teams.blue.score === 10 ? stats.screensAgainst + 1 : stats.screensAgainst;\n    }\n\n    stats.longestStreak = stats.streak > stats.longestStreak ? stats.streak : stats.longestStreak;\n  }); //Adding games played\n\n  stats.gamesPlayed = myMatches.length;\n  return stats;\n}","map":{"version":3,"sources":["/home/pi/foos/src/services/getPlayerStats.js"],"names":["getMyStats","player","matches","stats","wins","loss","difference","rating","winP","streak","longestStreak","gamesPlayed","screensFor","screensAgainst","myMatches","filter","el","indexOf","_id","blueMatches","m","teams","blue","players","redMatches","red","forEach","score","adjustment","toFixed","team","length"],"mappings":"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","sourcesContent":["\r\n\r\nexport default function getMyStats(player, matches){\r\n    let stats = {wins: 0, loss: 0, difference: 0, rating: 1500, winP: 0, streak: 0, longestStreak: 0, gamesPlayed: 0, screensFor: 0, screensAgainst: 0};\r\n    let myMatches = matches.filter(el => player.matches.indexOf(el._id)!==-1);\r\n\r\n    //Filtering matches into blue and red\r\n    let blueMatches = myMatches.filter(m => m.teams.blue.players[0]._id === player._id || m.teams.blue.players[1]._id === player._id );\r\n    let redMatches = myMatches.filter(m => m.teams.red.players[0]._id === player._id || m.teams.red.players[1]._id === player._id );\r\n\r\n    //Adding wins, loss and rating\r\n    blueMatches.forEach(m => {\r\n      m.teams.blue.score === 10 ? stats.wins++ : stats.loss++;\r\n      stats.rating += m.teams.blue.adjustment;\r\n    } );\r\n    redMatches.forEach(m => {\r\n      m.teams.red.score === 10 ? stats.wins++ : stats.loss++;\r\n      stats.rating += m.teams.red.adjustment; \r\n    });\r\n\r\n    //Adding win percentage\r\n    if(stats.wins === 0 && stats.loss ===0){\r\n      stats.winP = 0\r\n    }\r\n    else{\r\n      stats.winP = (stats.wins / (stats.wins + stats.loss)) * 100;\r\n    }\r\n     stats.winP = stats.winP.toFixed();\r\n\r\n     //Calculate streak and screens\r\n     myMatches.forEach(m => {\r\n      let team = (m.teams.blue.players[0]._id === player._id) || (m.teams.blue.players[1]._id === player._id) ? \"blue\" : \"red\";\r\n      if(team === \"blue\"){\r\n        stats.difference += (m.teams.blue.score - m.teams.red.score);\r\n        stats.streak = m.teams.blue.score === 10 ? stats.streak + 1 : 0;\r\n        stats.screensFor = m.teams.blue.score === 10 && m.teams.red.score === 0 ? stats.screensFor + 1 : stats.screensFor;\r\n        stats.screensAgainst = m.teams.blue.score === 0 && m.teams.red.score === 10 ? stats.screensAgainst + 1 : stats.screensAgainst;\r\n      }\r\n      else{\r\n        stats.difference += (m.teams.red.score - m.teams.blue.score);\r\n        stats.streak = m.teams.red.score === 10 ? stats.streak + 1 : 0;\r\n        stats.screensFor = m.teams.red.score === 10 && m.teams.blue.score === 0 ? stats.screensFor + 1 : stats.screensFor;\r\n        stats.screensAgainst = m.teams.red.score === 0 && m.teams.blue.score === 10 ? stats.screensAgainst + 1 : stats.screensAgainst;\r\n      }\r\n      stats.longestStreak = stats.streak > stats.longestStreak ? stats.streak : stats.longestStreak;\r\n     })\r\n\r\n     //Adding games played\r\n     stats.gamesPlayed = myMatches.length;\r\n\r\n     return stats\r\n     \r\n  }"]},"metadata":{},"sourceType":"module"}