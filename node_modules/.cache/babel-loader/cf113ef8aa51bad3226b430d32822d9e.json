{"ast":null,"code":"import _objectSpread from \"R:\\\\React\\\\foos-test\\\\foos-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./prevMatch-action\";\nconst initialState = {\n  prevMatches: [],\n  match: {\n    _id: \"\",\n    location: \"\",\n    teams: {\n      blue: {\n        players: [],\n        score: \"\"\n      },\n      red: {\n        players: [],\n        score: \"\"\n      }\n    }\n  },\n  isLoading: false,\n  prevMatchId: \"\",\n  error: \"\"\n};\nexport const prevMatchReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.FETCH_PREV_MATCHES_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.FETCH_PREV_MATCHES_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        prevMatches: action.payload\n      });\n\n    case types.FETCH_PREV_MATCHES_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.ADD_PREV_MATCHES_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.ADD_PREV_MATCHES_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        prevMatchId: action.payload._id\n      });\n\n    case types.ADD_PREV_MATCHES_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.REMOVE_PREV_MATCH_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.REMOVE_PREV_MATCH_SUCCESS:\n      return _objectSpread({}, state, {\n        prevMatches: state.prevMatches.filter(match => match.id !== action.payload),\n        isLoading: false\n      });\n\n    case types.REMOVE_PREV_MATCH_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["R:/React/foos-test/foos-master/src/redux/prevMatches/prevMatch-reducer.js"],"names":["types","initialState","prevMatches","match","_id","location","teams","blue","players","score","red","isLoading","prevMatchId","error","prevMatchReducer","state","action","type","FETCH_PREV_MATCHES_REQUEST","FETCH_PREV_MATCHES_SUCCESS","payload","FETCH_PREV_MATCHES_FAIL","ADD_PREV_MATCHES_REQUEST","ADD_PREV_MATCHES_SUCCESS","ADD_PREV_MATCHES_FAIL","REMOVE_PREV_MATCH_REQUEST","REMOVE_PREV_MATCH_SUCCESS","filter","id","REMOVE_PREV_MATCH_FAIL"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,oBAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE,EADM;AAEnBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,GAAG,EAAE,EADA;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAE,EAAX;AAAeC,QAAAA,KAAK,EAAE;AAAtB,OADD;AAELC,MAAAA,GAAG,EAAE;AAAEF,QAAAA,OAAO,EAAE,EAAX;AAAeC,QAAAA,KAAK,EAAE;AAAtB;AAFA;AAHF,GAFY;AAUnBE,EAAAA,SAAS,EAAE,KAVQ;AAWnBC,EAAAA,WAAW,EAAE,EAXM;AAYnBC,EAAAA,KAAK,EAAE;AAZY,CAArB;AAeA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAkC;AAChE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKjB,KAAK,CAACkB,0BAAX;AACE,+BAAYH,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE;AAA9B;;AACF,SAAKX,KAAK,CAACmB,0BAAX;AACE,+BAAYJ,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE,KAA9B;AAAqCT,QAAAA,WAAW,EAAEc,MAAM,CAACI;AAAzD;;AACF,SAAKpB,KAAK,CAACqB,uBAAX;AACE,+BAAYN,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE,KAA9B;AAAqCE,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAAnD;;AACF,SAAKpB,KAAK,CAACsB,wBAAX;AACE,+BAAYP,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE;AAA9B;;AACF,SAAKX,KAAK,CAACuB,wBAAX;AACE,+BAAYR,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE,KAA9B;AAAqCC,QAAAA,WAAW,EAAEI,MAAM,CAACI,OAAP,CAAehB;AAAjE;;AACF,SAAKJ,KAAK,CAACwB,qBAAX;AACE,+BAAYT,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE,KAA9B;AAAqCE,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAAnD;;AACF,SAAKpB,KAAK,CAACyB,yBAAX;AACE,+BAAYV,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE;AAA9B;;AACF,SAAKX,KAAK,CAAC0B,yBAAX;AACE,+BACKX,KADL;AAEEb,QAAAA,WAAW,EAAEa,KAAK,CAACb,WAAN,CAAkByB,MAAlB,CACXxB,KAAK,IAAIA,KAAK,CAACyB,EAAN,KAAaZ,MAAM,CAACI,OADlB,CAFf;AAKET,QAAAA,SAAS,EAAE;AALb;;AAOF,SAAKX,KAAK,CAAC6B,sBAAX;AACE,+BAAYd,KAAZ;AAAmBJ,QAAAA,SAAS,EAAE,KAA9B;AAAqCE,QAAAA,KAAK,EAAEG,MAAM,CAACI;AAAnD;;AACF;AACE,aAAOL,KAAP;AA1BJ;AA4BD,CA7BM","sourcesContent":["import * as types from \"./prevMatch-action\";\r\n\r\nconst initialState = {\r\n  prevMatches: [],\r\n  match: {\r\n    _id: \"\",\r\n    location: \"\",\r\n    teams: {\r\n      blue: { players: [], score: \"\" },\r\n      red: { players: [], score: \"\" }\r\n    }\r\n  },\r\n  isLoading: false,\r\n  prevMatchId: \"\",\r\n  error: \"\"\r\n};\r\n\r\nexport const prevMatchReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.FETCH_PREV_MATCHES_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.FETCH_PREV_MATCHES_SUCCESS:\r\n      return { ...state, isLoading: false, prevMatches: action.payload };\r\n    case types.FETCH_PREV_MATCHES_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.ADD_PREV_MATCHES_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.ADD_PREV_MATCHES_SUCCESS:\r\n      return { ...state, isLoading: false, prevMatchId: action.payload._id };\r\n    case types.ADD_PREV_MATCHES_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.REMOVE_PREV_MATCH_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.REMOVE_PREV_MATCH_SUCCESS:\r\n      return {\r\n        ...state,\r\n        prevMatches: state.prevMatches.filter(\r\n          match => match.id !== action.payload\r\n        ),\r\n        isLoading: false\r\n      };\r\n    case types.REMOVE_PREV_MATCH_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}