{"ast":null,"code":"import { getPrevMatches, deletePrevMatch, addToPrevMatches } from \"./prevMatch-service\";\n/* action types */\n\nexport const FETCH_PREV_MATCHES_REQUEST = \"FETCH_PREV_MATCHES_REQUEST\";\nexport const FETCH_PREV_MATCHES_SUCCESS = \"FETCH_PREV_MATCHES_SUCCESS\";\nexport const FETCH_PREV_MATCHES_FAIL = \"FETCH_PREV_MATCHES_FAIL\";\nexport const ADD_PREV_MATCHES_REQUEST = \"ADD_PREV_MATCHES_REQUEST\";\nexport const ADD_PREV_MATCHES_SUCCESS = \"ADD_PREV_MATCHES_SUCCESS\";\nexport const ADD_PREV_MATCHES_FAIL = \"ADD_PREV_MATCHES_FAIL\";\nexport const REMOVE_PREV_MATCH_REQUEST = \"REMOVE_PREV_MATCH_REQUEST\";\nexport const REMOVE_PREV_MATCH_SUCCESS = \"REMOVE_PREV_MATCH_SUCCESS\";\nexport const REMOVE_PREV_MATCH_FAIL = \"REMOVE_PREV_MATCH_FAIL\";\n/* action creators: thunk version */\n\nexport const fetchPrevMatches = () => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_PREV_MATCHES_REQUEST\n    });\n\n    try {\n      const _ref = await getPrevMatches(),\n            data = _ref.data;\n\n      dispatch({\n        type: FETCH_PREV_MATCHES_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: FETCH_PREV_MATCHES_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const sendToPrevMatches = matchData => {\n  return async dispatch => {\n    dispatch({\n      type: ADD_PREV_MATCHES_REQUEST\n    });\n\n    try {\n      const _ref2 = await addToPrevMatches(matchData),\n            data = _ref2.data;\n\n      dispatch({\n        type: ADD_PREV_MATCHES_SUCCESS,\n        payload: data\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: ADD_PREV_MATCHES_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};\nexport const removePrevMatch = id => {\n  return async dispatch => {\n    dispatch({\n      type: REMOVE_PREV_MATCH_REQUEST\n    });\n\n    try {\n      await deletePrevMatch(id);\n      dispatch({\n        type: REMOVE_PREV_MATCH_SUCCESS,\n        payload: id\n      });\n    } catch (e) {\n      console.log(e.message);\n      alert(e.message);\n      dispatch({\n        type: REMOVE_PREV_MATCH_FAIL,\n        payload: e.message\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/home/pi/foos-old/src/redux/prevMatches/prevMatch-action.js"],"names":["getPrevMatches","deletePrevMatch","addToPrevMatches","FETCH_PREV_MATCHES_REQUEST","FETCH_PREV_MATCHES_SUCCESS","FETCH_PREV_MATCHES_FAIL","ADD_PREV_MATCHES_REQUEST","ADD_PREV_MATCHES_SUCCESS","ADD_PREV_MATCHES_FAIL","REMOVE_PREV_MATCH_REQUEST","REMOVE_PREV_MATCH_SUCCESS","REMOVE_PREV_MATCH_FAIL","fetchPrevMatches","dispatch","type","data","payload","e","console","log","message","alert","sendToPrevMatches","matchData","removePrevMatch","id"],"mappings":"AAAA,SACEA,cADF,EAEEC,eAFF,EAGEC,gBAHF,QAIO,qBAJP;AAMA;;AACA,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAM;AACpC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;;AAGA,QAAI;AAAA,mBACe,MAAMH,cAAc,EADnC;AAAA,YACMe,IADN,QACMA,IADN;;AAEFF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEV,0BAAR;AAAoCY,QAAAA,OAAO,EAAED;AAA7C,OAAD,CAAR;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACAC,MAAAA,KAAK,CAACJ,CAAC,CAACG,OAAH,CAAL;AACAP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAET,uBADC;AAEPW,QAAAA,OAAO,EAAEC,CAAC,CAACG;AAFJ,OAAD,CAAR;AAID;AACF,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAME,iBAAiB,GAAGC,SAAS,IAAI;AAC5C,SAAO,MAAMV,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;;AAGA,QAAI;AAAA,oBACe,MAAMJ,gBAAgB,CAACqB,SAAD,CADrC;AAAA,YACMR,IADN,SACMA,IADN;;AAEFF,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEP,wBAAR;AAAkCS,QAAAA,OAAO,EAAED;AAA3C,OAAD,CAAR;AACD,KAHD,CAGE,OAAOE,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACAC,MAAAA,KAAK,CAACJ,CAAC,CAACG,OAAH,CAAL;AACAP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEN,qBADC;AAEPQ,QAAAA,OAAO,EAAEC,CAAC,CAACG;AAFJ,OAAD,CAAR;AAID;AACF,GAfD;AAgBD,CAjBM;AAmBP,OAAO,MAAMI,eAAe,GAAGC,EAAE,IAAI;AACnC,SAAO,MAAMZ,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;;AAGA,QAAI;AACF,YAAMR,eAAe,CAACwB,EAAD,CAArB;AACAZ,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEJ,yBAAR;AAAmCM,QAAAA,OAAO,EAAES;AAA5C,OAAD,CAAR;AACD,KAHD,CAGE,OAAOR,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,OAAd;AACAC,MAAAA,KAAK,CAACJ,CAAC,CAACG,OAAH,CAAL;AACAP,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEH,sBADC;AAEPK,QAAAA,OAAO,EAAEC,CAAC,CAACG;AAFJ,OAAD,CAAR;AAID;AACF,GAfD;AAgBD,CAjBM","sourcesContent":["import {\r\n  getPrevMatches,\r\n  deletePrevMatch,\r\n  addToPrevMatches\r\n} from \"./prevMatch-service\";\r\n\r\n/* action types */\r\nexport const FETCH_PREV_MATCHES_REQUEST = \"FETCH_PREV_MATCHES_REQUEST\";\r\nexport const FETCH_PREV_MATCHES_SUCCESS = \"FETCH_PREV_MATCHES_SUCCESS\";\r\nexport const FETCH_PREV_MATCHES_FAIL = \"FETCH_PREV_MATCHES_FAIL\";\r\n\r\nexport const ADD_PREV_MATCHES_REQUEST = \"ADD_PREV_MATCHES_REQUEST\";\r\nexport const ADD_PREV_MATCHES_SUCCESS = \"ADD_PREV_MATCHES_SUCCESS\";\r\nexport const ADD_PREV_MATCHES_FAIL = \"ADD_PREV_MATCHES_FAIL\";\r\n\r\nexport const REMOVE_PREV_MATCH_REQUEST = \"REMOVE_PREV_MATCH_REQUEST\";\r\nexport const REMOVE_PREV_MATCH_SUCCESS = \"REMOVE_PREV_MATCH_SUCCESS\";\r\nexport const REMOVE_PREV_MATCH_FAIL = \"REMOVE_PREV_MATCH_FAIL\";\r\n\r\n/* action creators: thunk version */\r\nexport const fetchPrevMatches = () => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: FETCH_PREV_MATCHES_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await getPrevMatches();\r\n      dispatch({ type: FETCH_PREV_MATCHES_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: FETCH_PREV_MATCHES_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const sendToPrevMatches = matchData => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: ADD_PREV_MATCHES_REQUEST\r\n    });\r\n    try {\r\n      const { data } = await addToPrevMatches(matchData);\r\n      dispatch({ type: ADD_PREV_MATCHES_SUCCESS, payload: data });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: ADD_PREV_MATCHES_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const removePrevMatch = id => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: REMOVE_PREV_MATCH_REQUEST\r\n    });\r\n    try {\r\n      await deletePrevMatch(id);\r\n      dispatch({ type: REMOVE_PREV_MATCH_SUCCESS, payload: id });\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      alert(e.message);\r\n      dispatch({\r\n        type: REMOVE_PREV_MATCH_FAIL,\r\n        payload: e.message\r\n      });\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}