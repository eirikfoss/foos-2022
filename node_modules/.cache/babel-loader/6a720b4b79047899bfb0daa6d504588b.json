{"ast":null,"code":"import _objectSpread from \"/home/pi/foos-old/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport * as types from \"./player-action\";\nconst initialState = {\n  players: [],\n  player: {\n    _id: \"\",\n    username: \"\",\n    teams: [],\n    matches: [],\n    stats: {\n      wins: \"\",\n      loss: \"\",\n      rating: \"\"\n    }\n  },\n  playerImages: [],\n  departments: [\"Oslo\", \"Hamar\"],\n  sortBy: \"All\",\n  isLoading: false,\n  isShuffling: false,\n  chosenPlayers: [],\n  error: \"\"\n};\nexport const playerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_PLAYER_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.ADD_PLAYER_SUCCESS:\n      return _objectSpread({}, state, {\n        players: [...state.players, action.payload],\n        isLoading: false\n      });\n\n    case types.ADD_PLAYER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.FETCH_PLAYERS_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.FETCH_PLAYERS_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        players: action.payload,\n        chosenPlayers: []\n      });\n\n    case types.FETCH_PLAYERS_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.FETCH_PLAYER_IMAGES_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.FETCH_PLAYER_IMAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        playerImages: action.payload\n      });\n\n    case types.FETCH_PLAYER_IMAGES_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.REMOVE_PLAYER_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.REMOVE_PLAYER_SUCCESS:\n      return _objectSpread({}, state, {\n        players: state.players.filter(player => player._id !== action.payload),\n        isLoading: false\n      });\n\n    case types.REMOVE_PLAYER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.UPDATE_PLAYER_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.UPDATE_PLAYER_SUCCESS:\n      return _objectSpread({}, state, {\n        players: state.players.filter(player => player.username !== action.payload),\n        isLoading: false\n      });\n\n    case types.UPDATE_PLAYER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: action.payload\n      });\n\n    case types.SET_PLAYER:\n      return _objectSpread({}, state, {\n        player: action.payload\n      });\n\n    case types.HANDLE_CHOSEN_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true\n      });\n\n    case types.HANDLE_CHOSEN_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        playerList: action.payload.pList,\n        chosenPlayers: action.payload.cList\n      });\n\n    case types.HANDLE_CHOSEN_FAIL:\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    case types.SET_CHOSEN_PLAYERS:\n      return _objectSpread({}, state, {\n        chosenPlayers: action.payload\n      });\n\n    case types.SET_SHUFFLING:\n      return _objectSpread({}, state, {\n        isShuffling: !state.isShuffling\n      });\n\n    case types.SET_SORT_PLAYERS_BY:\n      return _objectSpread({}, state, {\n        sortBy: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/pi/foos-old/src/redux/players/player-reducer.js"],"names":["types","initialState","players","player","_id","username","teams","matches","stats","wins","loss","rating","playerImages","departments","sortBy","isLoading","isShuffling","chosenPlayers","error","playerReducer","state","action","type","ADD_PLAYER_REQUEST","ADD_PLAYER_SUCCESS","payload","ADD_PLAYER_FAIL","FETCH_PLAYERS_REQUEST","FETCH_PLAYERS_SUCCESS","FETCH_PLAYERS_FAIL","FETCH_PLAYER_IMAGES_REQUEST","FETCH_PLAYER_IMAGES_SUCCESS","FETCH_PLAYER_IMAGES_FAIL","REMOVE_PLAYER_REQUEST","REMOVE_PLAYER_SUCCESS","filter","REMOVE_PLAYER_FAIL","UPDATE_PLAYER_REQUEST","UPDATE_PLAYER_SUCCESS","UPDATE_PLAYER_FAIL","SET_PLAYER","HANDLE_CHOSEN_REQUEST","HANDLE_CHOSEN_SUCCESS","playerList","pList","cList","HANDLE_CHOSEN_FAIL","SET_CHOSEN_PLAYERS","SET_SHUFFLING","SET_SORT_PLAYERS_BY"],"mappings":"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","sourcesContent":["import * as types from \"./player-action\";\r\n\r\nconst initialState = {\r\n  players: [],\r\n  player: {\r\n    _id: \"\",\r\n    username: \"\",\r\n    teams: [],\r\n    matches: [],\r\n    stats: { wins: \"\", loss: \"\", rating: \"\" }\r\n  },\r\n  playerImages: [],\r\n  departments: [\"Oslo\", \"Hamar\"],\r\n  sortBy: \"All\",\r\n  isLoading: false,\r\n  isShuffling: false,\r\n  chosenPlayers: [],\r\n  error: \"\"\r\n};\r\n\r\nexport const playerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.ADD_PLAYER_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.ADD_PLAYER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        players: [...state.players, action.payload],\r\n        isLoading: false\r\n      };\r\n    case types.ADD_PLAYER_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.FETCH_PLAYERS_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.FETCH_PLAYERS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        players: action.payload,\r\n        chosenPlayers: []\r\n      };\r\n    case types.FETCH_PLAYERS_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.FETCH_PLAYER_IMAGES_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.FETCH_PLAYER_IMAGES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        playerImages: action.payload\r\n      };\r\n    case types.FETCH_PLAYER_IMAGES_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.REMOVE_PLAYER_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.REMOVE_PLAYER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        players: state.players.filter(player => player._id !== action.payload),\r\n        isLoading: false\r\n      };\r\n    case types.REMOVE_PLAYER_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.UPDATE_PLAYER_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.UPDATE_PLAYER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        players: state.players.filter(\r\n          player => player.username !== action.payload\r\n        ),\r\n        isLoading: false\r\n      };\r\n    case types.UPDATE_PLAYER_FAIL:\r\n      return { ...state, isLoading: false, error: action.payload };\r\n    case types.SET_PLAYER:\r\n      return { ...state, player: action.payload };\r\n    case types.HANDLE_CHOSEN_REQUEST:\r\n      return { ...state, isLoading: true };\r\n    case types.HANDLE_CHOSEN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        playerList: action.payload.pList,\r\n        chosenPlayers: action.payload.cList\r\n      };\r\n    case types.HANDLE_CHOSEN_FAIL:\r\n      return { ...state, error: action.payload };\r\n    case types.SET_CHOSEN_PLAYERS:\r\n      return { ...state, chosenPlayers: action.payload };\r\n    case types.SET_SHUFFLING:\r\n      return { ...state, isShuffling: !state.isShuffling };\r\n    case types.SET_SORT_PLAYERS_BY:\r\n      return { ...state, sortBy: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}